import { ContaRepository } from "../repository/ContaRepository";
import { Conta } from "../model/Conta";
import { colors } from "../util/Colors";

export class ContaController implements ContaRepository {

    private listaContas: Array<Conta> = new Array<Conta>();
    numero: number = 0;

    procurarPorNumero(numero: number): void {

        let buscaConta = this.buscarContaPorNumero(numero);

        if (buscaConta != null) {
            console.log(colors.green);
            console.log(`Conta encontrada. N√∫mero: ${buscaConta.numero}.`);
            buscaConta.visualizar();
            console.log(colors.reset);
        }
        else {
            console.log(colors.red);
            console.log('‚ùå Conta n√£o encontrada. Numero inv√°lido ou conta n√£o existe.');
            console.log(colors.reset);
        }
    }

    listarTodas(): void {
        for (let conta of this.listaContas) {
            conta.visualizar();
        }
    }

    cadastrar(conta: Conta): void {
        this.listaContas.push(conta);
        console.log(colors.cyan);
        console.log(`Conta n√∫mero ${conta.numero} criada com sucesso!üéâ`);
        console.log(colors.reset);
    }

    atualizar(conta: Conta): void {
        let buscaConta = this.buscarContaPorNumero(conta.numero);

        if (buscaConta != null) {
            this.listaContas[this.listaContas.indexOf(buscaConta)] = conta;
            console.log(colors.green);
            console.log(`Conta n√∫mero ${conta.numero} atualizada com sucesso!üéâ`);
            console.log(colors.reset);
        }
        else {
            console.log(colors.red);
            console.log('‚ùå Conta n√£o encontrada. N√∫mero inv√°lido ou conta n√£o existe.');
            console.log(colors.reset);
        }
    }

    deletar(numero: number): void {
        let buscaConta = this.buscarContaPorNumero(numero);

        if (buscaConta != null) {
            this.listaContas.splice(this.listaContas.indexOf(buscaConta), 1);
            console.log(colors.green);
            console.log(`Conta n√∫mero ${numero} exclu√≠da com sucesso!`);
            console.log(colors.reset);
        }
        else {
            console.log(colors.red);
            console.log('‚ùå Conta n√£o encontrada. N√∫mero inv√°lido ou conta n√£o existe.');
            console.log(colors.reset);
        }
    }

    public sacar(numero: number, valor: number): void {
        let conta = this.buscarContaPorNumero(numero);

        if (conta != null) {

            if (conta.sacar(valor) == true) {
                console.log(colors.green);
                console.log(`Saque de R$ ${valor} realizado com sucesso na conta n√∫mero ${numero}.`);
                console.log(colors.reset);
            }
        } else {
            console.log(colors.red);
            console.log('‚ùå Conta n√£o encontrada. N√∫mero inv√°lido ou conta n√£o existe.');
            console.log(colors.reset);
        }
    }

    public depositar(numero: number, valor: number): void {
        let conta = this.buscarContaPorNumero(numero);

        if (conta != null) {
            conta.depositar(valor);
            console.log(colors.green);
            console.log(`Dep√≥sito de R$ ${valor} realizado com sucesso na conta n√∫mero ${numero}.`);
            console.log(colors.reset);
        } else {
            console.log(colors.red);
            console.log('‚ùå Conta n√£o encontrada. N√∫mero inv√°lido ou conta n√£o existe.');
            console.log(colors.reset);
        }
    }

    public transferir(numeroOrigem: number, numeroDestino: number, valor: number): void {
        let contaOrigem = this.buscarContaPorNumero(numeroOrigem);
        let contaDestino = this.buscarContaPorNumero(numeroDestino);

        if (contaOrigem != null && contaDestino != null) {
            if (contaOrigem.sacar(valor) == true) {
                contaDestino.depositar(valor);
                console.log(colors.green);
                console.log(`Transfer√™ncia de R$ ${valor} realizada com sucesso da conta n√∫mero ${numeroOrigem} para a conta n√∫mero ${numeroDestino}.`);
                console.log(colors.reset);
            }
        } else {
            console.log(colors.red);
            console.log('‚ùå Conta n√£o encontrada. N√∫mero inv√°lido ou conta n√£o existe.');
            console.log(colors.reset);
        }
    }

    // M√©todos auxiliares

    //Gerar numero da conta
    public gerarNumeroConta(): number {
        this.numero++;
        return this.numero;
    }

    // Buscar conta por n√∫mero
    public buscarContaPorNumero(numero: number): Conta | null {
        for (let conta of this.listaContas) {
            if (conta.numero === numero) {
                return conta;
            }
        }

        return null;
    }

}
