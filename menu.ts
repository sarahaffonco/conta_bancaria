import { colors } from "./src/util/Colors";
import { ContaCorrente } from "./src/model/ContaCorrente";
import { ContaPoupanca } from "./src/model/ContaPoupanca";
import { ContaController } from "./src/controller/ContaController";
import read = require('readline-sync');

// valida√ß√µes
const validarNomeTitular = (titular: string): boolean =>/^[A-Za-z√Ä-√∫\s]+$/.test(titular);

function validarValorPositivo(mensagem: string, mensagemErro: string = "‚ùå Valor deve ser maior que zero. Tente novamente."): number {
    let valor: number;
    do {
        console.log(colors.magenta);
        valor = read.questionFloat(` ${mensagem}`);
        if (valor <= 0) {
            console.log(colors.red);
            console.log(mensagemErro);
        }
    } while (valor <= 0);
    return valor;
}

function validarValorIntervalo(
    mensagem: string,
    min: number,
    max: number,
    mensagemErro: string = `‚ùå Valor deve estar entre ${min} e ${max}. Tente novamente.`): number {

    let valor: number;

    do {
        console.log(colors.magenta);
        valor = read.questionInt(`${mensagem}`);
        if (valor < min || valor > max) {
            console.log(colors.red);
            console.log(mensagemErro);
        }
    } while (valor < min || valor > max);

    return valor;
}

export function main() {
    let contas: ContaController = new ContaController();

    let opcao, numero, agencia, tipo, saldo, limite, aniversario: number, valor, numeroDestino:number;
    let titular: string;
    let continuar: boolean = true;

    const tiposContas = ['Conta Corrente', 'Conta Poupan√ßa'];

    while (continuar) {
        console.log(colors.yellow);
        console.log("*****************************************************");
        console.log("                                                     ");
        console.log("            üí∞ BANCO DO BRAZIL COM Z üí∞              ");
        console.log("                                                     ");
        console.log("*****************************************************");
        console.log("                                                     ");
        console.log("            1Ô∏è‚É£  Criar Conta                          ");
        console.log("            2Ô∏è‚É£  Listar todas as Contas               ");
        console.log("            3Ô∏è‚É£  Buscar Conta por Numero              ");
        console.log("            4Ô∏è‚É£  Atualizar Dados da Conta             ");
        console.log("            5Ô∏è‚É£  Apagar Conta                         ");
        console.log("            6Ô∏è‚É£  Sacar                                ");
        console.log("            7Ô∏è‚É£  Depositar                            ");
        console.log("            8Ô∏è‚É£  Transferir valores entre Contas      ");
        console.log("            9Ô∏è‚É£  Sair                                 ");
        console.log("                                                     ");
        console.log("*****************************************************");
        console.log(colors.reset);

        console.log(colors.green);
        opcao = read.questionInt("\nEntre com a op√ß√£o desejada:\nüîµ ");
        console.log(colors.reset);

        switch (opcao) {
            case 1:
                console.log(colors.blue);
                console.log("\nCriar nova conta");
                console.log(colors.reset);

                console.log(colors.magenta);
                console.log("\nDigite o  numero da agencia (apenas n√∫meros):");
                agencia = read.questionInt("üîµ ");

                console.log("\nDigite o nome do titular da conta:");
                titular = read.question("üîµ ");
                console.log(colors.reset);

                while (!validarNomeTitular(titular)) {
                    console.log(colors.red);
                    console.log("‚ùå Nome inv√°lido! Use apenas letras e espa√ßos.");
                    console.log(colors.reset);
                    console.log(colors.magenta);
                    titular = read.question("\n‚û° Digite novamente: ").trim();
                    console.log(colors.reset);
                }

                console.log("Escolha o tipo de conta:");
                tipo = read.keyInSelect(tiposContas, " ", { cancel: false }) + 1;

                console.log(colors.magenta);
                saldo = validarValorPositivo("\n Digite o saldo inicial da conta (apenas n√∫meros): \nüîµ R$");
                console.log(colors.reset);

                switch (tipo) {
                    case 1: // Conta Corrente
                        limite = validarValorPositivo("\nDigite o limite da conta (apenas n√∫meros):\nüîµ R$");
                        contas.cadastrar(new ContaCorrente(contas.gerarNumeroConta(), agencia, tipo, titular, saldo, limite));
                        break;
                    case 2: // Conta Poupan√ßa
                        aniversario = validarValorIntervalo(" Dia do anivers√°rio (1-31): \nüîµ  ", 1, 31);

                        try {
                            contas.cadastrar(new ContaPoupanca(contas.gerarNumeroConta(), agencia, tipo, titular, saldo, aniversario));
                        } catch (error) {
                            console.log(colors.red);

                            // Verifica√ß√£o segura do tipo do erro
                            if (error instanceof Error) {
                                console.log(`‚ùå Erro ao criar conta: ${error.message}`);
                            } else {
                                console.log('‚ùå Ocorreu um erro inesperado');
                            }
                            console.log(colors.reset);
                            keyPress();
                            continue;
                        }
                        break;
                }
                console.log(colors.reset);
                keyPress();
                break;

            case 2:
                console.log(colors.yellow);
                console.log("\nLista com as contas criadas:");
                contas.listarTodas();
                console.log(colors.reset);
                keyPress();
                break;

            case 3:
                console.log(colors.magenta);
                console.log("\nInsira os dados da conta que deseja consultar (apenas n√∫meros)");
                numero = read.questionInt("üîµ ");
                contas.procurarPorNumero(numero);

                console.log(colors.reset);
                keyPress();
                break;

            case 4:
                console.log(colors.magenta);
                console.log("\nInsira os dados da conta que deseja atualizar (apenas n√∫meros)");
                numero = read.questionInt("üîµ ");

                let conta = contas.buscarContaPorNumero(numero);

                if (conta != null) {
                    console.log("\nDigite o novo n√∫mero da ag√™ncia (apenas n√∫meros):");
                    agencia = read.questionInt("üîµ ");

                    console.log("\nDigite o novo nome do titular da conta:");
                    titular = read.question("üîµ ");

                    while (!validarNomeTitular(titular)) {
                        console.log(colors.red);
                        console.log("‚ùå Nome inv√°lido! Use apenas letras e espa√ßos.");
                        console.log(colors.reset);

                        console.log(colors.magenta);
                        titular = read.question("‚û° Digite novamente: ").trim();
                        console.log(colors.reset);
                    }

                    console.log(colors.reset);
                    console.log("Escolha o tipo de conta:");
                    tipo = read.keyInSelect(tiposContas, "üîµ ", { cancel: false }) + 1;

                    console.log(colors.magenta);
                    saldo = validarValorPositivo("\nDigite o novo saldo  da conta (apenas n√∫meros): \nüîµ R$");
                    console.log(colors.reset);

                    switch (tipo) {
                        case 1: // Conta Corrente
                            console.log(colors.magenta);
                            limite = validarValorPositivo("Digite o novo limite da conta (apenas n√∫meros): \nüîµ R$ ");
                            contas.atualizar(new ContaCorrente(numero, agencia, tipo, titular, saldo, limite));
                            console.log(colors.reset);
                            keyPress();
                            break;

                        case 2: // Conta Poupan√ßa
                            console.log(colors.magenta);
                            aniversario = validarValorIntervalo(" Dia do anivers√°rio (1-31): \nüîµ  ", 1, 31);

                            try {
                                contas.atualizar(new ContaPoupanca(numero, agencia, tipo, titular, saldo, aniversario));
                            } catch (error) {
                                console.log(colors.red);
                                if (error instanceof Error) {
                                    console.log(`‚ùå Erro ao atualizar conta: ${error.message}`);
                                } else {
                                    console.log('‚ùå Ocorreu um erro inesperado');
                                }
                            }
                            console.log(colors.reset);
                            keyPress();
                            break;
                    }
                } else {
                    console.log(colors.red);
                    console.log('‚ùå Conta n√£o encontrada. N√∫mero inv√°lido ou conta n√£o existe.');
                    console.log(colors.reset);
                    keyPress();
                }
                break;

            case 5:
                console.log(colors.magenta);
                console.log("\nInsira os dados da conta que deseja excluir (apenas n√∫meros)");
                numero = read.questionInt("üîµ ");

                contas.deletar(numero);

                console.log(colors.reset);
                keyPress();
                break;

            case 6:
                console.log(colors.blue);
                console.log("\nSaque de valores");
                console.log(colors.reset);

                console.log(colors.magenta);
                console.log("\nInsira os dados da conta origem do saque (apenas n√∫meros)");
                numero = read.questionInt("üîµ ");

                console.log("\nInsira o valor do saque (apenas n√∫meros)");
                valor = validarValorPositivo("üîµ R$");

                contas.sacar(numero, valor);
                console.log(colors.reset);

                keyPress();
                break;

            case 7:
                console.log(colors.blue);
                console.log("\nDeposito de valores");
                console.log(colors.reset);

                console.log(colors.magenta);
                console.log("\nInsira os dados da conta origem do dep√≥sito (apenas n√∫meros)");
                numero = read.questionInt("üîµ ");

                console.log("\nInsira o valor do dep√≥sito (apenas n√∫meros)");
                valor = validarValorPositivo("üîµ R$");

                contas.depositar(numero, valor);

                console.log(colors.reset);
                keyPress();
                break;

            case 8:
                console.log(colors.blue);
                console.log("\Transferencia de valores");
                console.log(colors.reset);

                console.log(colors.magenta);
                console.log("\nInsira os dados da conta origem da transfer√™ncia (apenas n√∫meros)");
                numero = read.questionInt("üîµ ");

                console.log("\nInsira os dados da conta destino da transfer√™ncia (apenas n√∫meros)");
                numeroDestino = read.questionInt("üîµ ");

                console.log("\nInsira o valor da transfer√™ncia (apenas n√∫meros)");
                valor = validarValorPositivo("üîµ R$");

                contas.transferir(numero, numeroDestino, valor);
                console.log(colors.reset);
                keyPress();
                break;

            case 9:
                console.log(colors.magenta);
                console.log("\n üíπ Banco do Brazil com Z - O seu Futuro come√ßa aqui!");
                console.log(colors.reset);
                sobre();
                console.log("üëã Saindo do sistema...");
                console.log(colors.reset);
                continuar = false;
                break;

            default:
                console.log(colors.red);
                console.log("‚ùå Op√ß√£o inv√°lida. Tente novamente.");
                console.log(colors.reset);
                keyPress();
        }
    }
}

function keyPress(): void {
    console.log("\n ‚úîÔ∏è  Pressione enter para continuar...");
    read.prompt();
}

export function sobre(): void {
    console.log(colors.cyan);
    console.log("\n*****************************************************");
    console.log("Projeto Desenvolvido por: Sarah Affon√ßo");
    console.log("Generation Brasil - saraha@genstudents.org");
    console.log("https://github.com/sarahaffonco/conta_bancaria");
    console.log("*****************************************************");
}

main();
